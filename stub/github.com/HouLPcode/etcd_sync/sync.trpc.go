// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: sync.proto

package etcd_sync

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// SyncServiceService defines service.
type SyncServiceService interface {
	// Debug 执行切换操作
	Debug(ctx context.Context, req *SyncRequest) (*SyncResponse, error)
}

func SyncServiceService_Debug_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &SyncRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(SyncServiceService).Debug(ctx, reqbody.(*SyncRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// SyncServiceServer_ServiceDesc descriptor for server.RegisterService.
var SyncServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "etcd_sync.SyncService",
	HandlerType: ((*SyncServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/etcd_sync.SyncService/Debug",
			Func: SyncServiceService_Debug_Handler,
		},
	},
}

// RegisterSyncServiceService registers service.
func RegisterSyncServiceService(s server.Service, svr SyncServiceService) {
	if err := s.Register(&SyncServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("SyncService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedSyncService struct{}

// Debug 执行切换操作
func (s *UnimplementedSyncService) Debug(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	return nil, errors.New("rpc Debug of service SyncService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// SyncServiceClientProxy defines service client proxy
type SyncServiceClientProxy interface {
	// Debug 执行切换操作
	Debug(ctx context.Context, req *SyncRequest, opts ...client.Option) (rsp *SyncResponse, err error)
}

type SyncServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewSyncServiceClientProxy = func(opts ...client.Option) SyncServiceClientProxy {
	return &SyncServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *SyncServiceClientProxyImpl) Debug(ctx context.Context, req *SyncRequest, opts ...client.Option) (*SyncResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/etcd_sync.SyncService/Debug")
	msg.WithCalleeServiceName(SyncServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("")
	msg.WithCalleeServer("")
	msg.WithCalleeService("SyncService")
	msg.WithCalleeMethod("Debug")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &SyncResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
