// Code generated by MockGen. DO NOT EDIT.
// Source: stub/github.com/HouLPcode/etcd_sync/sync.trpc.go
//
// Generated by this command:
//
//	mockgen -destination=stub/github.com/HouLPcode/etcd_sync/sync_mock.go -package=etcd_sync -self_package=github.com/HouLPcode/etcd_sync --source=stub/github.com/HouLPcode/etcd_sync/sync.trpc.go
//

// Package etcd_sync is a generated GoMock package.
package etcd_sync

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockSyncServiceService is a mock of SyncServiceService interface.
type MockSyncServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceServiceMockRecorder
}

// MockSyncServiceServiceMockRecorder is the mock recorder for MockSyncServiceService.
type MockSyncServiceServiceMockRecorder struct {
	mock *MockSyncServiceService
}

// NewMockSyncServiceService creates a new mock instance.
func NewMockSyncServiceService(ctrl *gomock.Controller) *MockSyncServiceService {
	mock := &MockSyncServiceService{ctrl: ctrl}
	mock.recorder = &MockSyncServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncServiceService) EXPECT() *MockSyncServiceServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSyncServiceService) ISGOMOCK() struct{} {
	return struct{}{}
}

// Debug mocks base method.
func (m *MockSyncServiceService) Debug(ctx context.Context, req *SyncRequest) (*SyncResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Debug", ctx, req)
	ret0, _ := ret[0].(*SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug.
func (mr *MockSyncServiceServiceMockRecorder) Debug(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSyncServiceService)(nil).Debug), ctx, req)
}

// MockSyncServiceClientProxy is a mock of SyncServiceClientProxy interface.
type MockSyncServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockSyncServiceClientProxyMockRecorder
}

// MockSyncServiceClientProxyMockRecorder is the mock recorder for MockSyncServiceClientProxy.
type MockSyncServiceClientProxyMockRecorder struct {
	mock *MockSyncServiceClientProxy
}

// NewMockSyncServiceClientProxy creates a new mock instance.
func NewMockSyncServiceClientProxy(ctrl *gomock.Controller) *MockSyncServiceClientProxy {
	mock := &MockSyncServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockSyncServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncServiceClientProxy) EXPECT() *MockSyncServiceClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockSyncServiceClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// Debug mocks base method.
func (m *MockSyncServiceClientProxy) Debug(ctx context.Context, req *SyncRequest, opts ...client.Option) (*SyncResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Debug", varargs...)
	ret0, _ := ret[0].(*SyncResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Debug indicates an expected call of Debug.
func (mr *MockSyncServiceClientProxyMockRecorder) Debug(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockSyncServiceClientProxy)(nil).Debug), varargs...)
}
